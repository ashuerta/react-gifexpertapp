{"version":3,"sources":["components/CategoryAdd.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","components/GifExpert.js","index.js"],"names":["CategoryAdd","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","c","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","res","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpert","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACRC,mBAAS,IADD,mBACrCC,EADqC,KACzBC,EADyB,KAiB5C,OACI,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAC,OAAKP,GAAL,mBAAoBO,OACnCN,EAAc,MAOlB,SAEI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SArBc,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,a,+BCPlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEDI,MAAMF,GAFL,cAEbG,EAFa,gBAGEA,EAAIC,OAHN,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAYZM,GAZY,4CAAH,sDCEPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEpC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCDHO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECHb,SAACA,GAAc,IAAD,EACZd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KA0BtC,OApBAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAK,SAAAC,GAGEH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAI1B,CAACpB,IASGqB,EDZyBK,CAAa1B,GAAhCa,EAXwB,EAW9BN,KAAca,EAXgB,EAWhBA,QAyBrB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAEjDoB,GAAW,mBAAGJ,UAAU,mCAAb,wBACb,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEQA,GADCA,EAAIC,aE/CxBgB,EAAY,WAAM,MAGSzC,mBAAS,CAAC,cAAe,qBAAsB,gBAHxD,mBAGpB0C,EAHoB,KAGR3C,EAHQ,KAW3B,OACI,qCACI,+CACA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBAEA,6BAKQ2C,EAAWnB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MCtBjC6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.fcb89619.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nexport const CategoryAdd = ({setCategories}) => {\n    const [inputValue, setInputValue] = useState('');\n    const handleInputChange = (e) => {\n        //console.log(e.target.value);\n        setInputValue(e.target.value);\n    }\n    \n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if(inputValue.trim().length > 2) {\n            setCategories(c => [inputValue, ...c]);\n            setInputValue('');\n        }\n        //console.log('Submit Done!');\n        \n    }\n    \n    return (\n        <form onSubmit={handleSubmit}>\n            {/* <h1>{inputValue}</h1> */}\n            <input \n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputChange}/>\n        </form>\n    )\n}\n\nCategoryAdd.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","export const getGifs = async( category ) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&api_key=7gkXawNcwT8k7l7fJPd7M4pwv6h69my1&limit=10`;\n    const res = await fetch(url);\n    const {data} = await res.json();\n    //console.log(data);\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    });\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ({id, title, url}) => {\n    //console.log({id, title, url});\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={url} alt={title} />\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react'\n//import React, { useState, useEffect } from 'react'\n//import { getGifs } from '../helpers/getGifs';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n    //const [count, setCount] = useState(0);   \n    /*\n    const [images, setimages] = useState([]);\n    useEffect(() => {\n        getGifs(category)\n            .then(imgs => setimages(imgs))\n    }, [category])\n    */\n    \n    //data:images use alias : like as in sql \n    const {data: images, loading} = useFetchGifs(category);\n    \n    /*\n    useEffect(() => {\n        getGifs();    \n    }, [])\n\n    const getGifs = async() => {\n        const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&api_key=7gkXawNcwT8k7l7fJPd7M4pwv6h69my1&limit=10`;\n        const res = await fetch(url);\n        const {data} = await res.json();\n        //console.log(data);\n        const gifs = data.map(img => {\n            return {\n                id: img.id,\n                title: img.title,\n                url: img.images?.downsized_medium.url\n            }\n        });\n        //console.log(gifs);\n        setimages(gifs);\n     }\n\n    //getGifs();\n    */\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n            {/* { loading ? 'Loading...' : 'Loaded' } */}\n            { loading && <p className=\"animate__animated animate__flash\">Loading...</p> }\n            <div className=\"card-grid\">\n                {\n                    images.map(img => ( \n                        <GifGridItem \n                            key={img.id}\n                            {...img} \n                        />\n                    ))\n                }\n\n                {/* <ol>\n                    {\n                        images.map(({id, title}) => (\n                            <li key={id}>{title}</li>\n                        ))\n                    }\n                </ol> */}\n                {/* <h3>{count}</h3>\n                <button onClick={() => setCount(count+1)}></button> */}\n\n                {/* {\n                    images.map(img => ( \n                        <GifGridItem \n                            key={img.id}\n                            {...img} \n                        />\n                    ))\n                } */}\n            </div>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n        getGifs(category)\n            .then(imgs => {\n                //setTimeout(() => {\n                    //console.log(imgs);\n                    setState({\n                        data: imgs,\n                        loading: false\n                    });    \n                //}, 3000);\n            });\n    }, [category])\n\n    // setTimeout(() => {\n    //     setstate({\n    //         data: [1,2,3,4,5],\n    //         loading: false\n    //     });\n    // }, 3000);\n\n    return state; // { data: [], loading: true }\n}\n","import React, { useState } from 'react'\nimport { CategoryAdd } from './CategoryAdd';\nimport { GifGrid } from './GifGrid';\n\nexport const GifExpert = () => {\n\n    //const categories = ['Dragon Ball', 'No Natsu No Taizai', 'Saint Seiya'];\n    const [categories, setCategories] = useState(['Dragon Ball', 'No Natsu No Taizai', 'Saint Seiya']);\n\n    // const handleAdd = () => {\n    //     //setCategories(...categories, 'Mazinger Z');\n\n    //     setCategories(cFn => [...cFn, 'Mazinger Z']);\n    // };\n\n    return(\n        <>\n            <h1>GifExpert App</h1>\n            <CategoryAdd setCategories= { setCategories } />\n            <hr />\n            {/* <button onClick={handleAdd}>Add</button> */}\n            <ol>\n                {\n                    // categories.map(category => {\n                    //     return <li key={category}>{category}</li>\n                    // })\n                    categories.map(category => (\n                        <GifGrid \n                            key={category}\n                            category={category} \n                        />\n                    ))\n                }\n            </ol>\n            \n        </>\n    )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpert } from './components/GifExpert';\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpert />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}